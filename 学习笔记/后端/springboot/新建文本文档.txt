一. Springboot入门
二Springboot属性绑定;
三.Springboot热部署
四.Springboot源码导入
五Springboot自动配置原理
六.Springboot数据源配置
七.Springboot自动配置mybatis
八.Springboot自动配置内嵌Tomcat
九.Springboot注册web组件
十.Springboot自动配置SpringMVC
十一 .Springboot模板引擎
十二. Springboot项目练习
十三. Springboot手写starter
十四. Springboot整合redis缓存
十五. Springboot消息组件整合
十六. Springboot通过Docker虚拟化部署
十七. Springboot通过Jenkins持续化构建


<Artifactld>:项目的名称
<GroupId>:一般分为多个段，这里我只说两段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。
<plugins>:插件
一.创建一个HelloWorld项目
1.close  project
2.Configure->Structure  for  new  project  设置jdk1.8
3.settings ->设置好maven
4.创建父工程，添加好依赖
5.创建子工程

创建jar包的方法：
1.打开terminal终端
2. D:\javaProjects\tx_sboot>mvn -f springboot-first clean package  注释：springboot-first是父工程下的子工程
3.D:\javaProjects\tx_sboot>java -jar springboot-first\target\springboot-first-1.0-SNAPSHOT.jar
4.找到target的包，右键show in expero   用win rar  打开查看内部信息

1. starter是什么?我们何如去使用这些starter?
2. Tomcat 的内嵌是如何完成
3.使用了web对应的starter，springmvc是如何自动装配?
4.我们如何来配置我们自定义话的相关内容。

二.自动配置
1.内嵌的tomcat端口默认配置是8080，这些都属于Spring Boot自动配置的范畴
2.@EnableAutoConfiguration注释，此注释自动载入应用程序所需的所有Bean。

三.springboot 官方网站
getting started：新手入门;
Using Spring Boot：对starter，maven的一个管理
configure ：配置
developer tools:开发者工具

四.依赖
4.1<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.0.RELEASE</version>
    </parent>
1.这个parent标签有一个最常用的功能，就是定义子标签的springboot依赖版本号。
2.定义了一个父标签spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号
3.使用默认编码格式为 UTF-8
4.定义了 Java 编译版本为 1.8
5.定义了针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml
6.执行打包操作的配置
7.自动化的资源过滤
8.自动化的插件配置
4.2当我们需要使用自己定义的 parent ，我们的 Spring Boot 项目要继承自公司内部的 parent ，这个时候可以这么做。
一个简单的办法就是我们自行定义 dependencyManagement 节点，然后在里边定义好版本号，再接下来在引用依赖时也就不用写版本号了，像下面这样：
<dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-dependencies</artifactId>
			<version>2.1.6.RELEASE</version>
			<type>pom</type>
			<scope>import</scope>
		</dependency>
	</dependencies>
</dependencyManagement>
但这种方式只能解决依赖的版本号问题，如果我们仍然需要关于打包的插件、编译的 JDK 版本、文件的编码格式等等这些配置，在没有 parent 的时候，这些统统要自己去配置。
点击parent进去看源码，parent下还有parent，
dependencyManagement元素提供了一种管理依赖版本号的方式。在dependencyManagement元素中声明所依赖的jar包的版本号等信息，那么所有子项目再次引入此依赖jar包
时则无需显式的列出版本号。Maven会沿着父子层级向上寻找拥有dependencyManagement 元素的项目，然后使用它指定的版本号。
4.3   
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
      ：引入hibernate实体映射。数据库的表和实体类进行关联归他管。
4.4 
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
       ：做数据库连接，肯定要引入jdbc
4.5
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>:给实体类的@data使用,省去了setget,equals,hashcode,tostring()。
4.6
	<groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.10</version>   ：引入数据库驱动     

<packaging>pom</packaging>：意思是使用maven分模块管理，都会有一个父级项目，pom文件一个重要的属性就是packaging（打包类型），一般来说所有的父级项目的
packaging都为pom，packaging默认类型jar类型，如果不做配置，maven会将该项目打成jar包。而对于各个子项目，需要在其对应的pom文件开头申明对父级项目的引用，
通过GAV实现。对于子项目自己的GAV配置，GV如果不配置，则会从父级项目的配置继承过来。子模块可通过dependencies标签来添加自己的依赖，此外子类项目的packaging值
只能是war或者jar，前面已经说过，packaging默认是jar类型。如果是需要部署的项目，则需要打包成war类型，如果只是内部调用或者是作服务使用，则推荐打包成jar类型。


spring中@Configuration注解的作用:官方文档描述：用@Conﬁguration注释类表明其主要目的是作为bean定义的源,
@Conﬁguration类允许通过调用同一类中的其他@Bean方法来定义bean之间的依赖关系
@SpringbootAutoConfiguration自动配置的包，mybaties没有自动配置，要手动引入。
@Import({AutoConfigurationImportSelector.class})：@AutoConfiguration类通过这个注解办到自动配置的。

六.springboot热部署
1.developer tools:开发者工具
2.automatic  restart:自动重启
3.triggering  restart:触发重启
做法：1.添加依赖
<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
2.任意改变文件代码。按ctrl+F9刷新即可。

七.JPA的常用注解
1.@Entity
2.在Dao的接口上：
2.1@Repository
public interface IStudentDao extends JpaRepository<Student,Integer> {}
Student表示对应哪个实体类，Integer表示主键的java类型，id什么类型就是什么。
2.2.//1.JpaRepository提供了基本的CURD方法，根据方法名解析成DQL(数据库查询语言)语句-----》find ...by  Student对应表，StudentName对应数据库的列名
    List<Student> findStudentsByStudentName(String studentName);
3.1方法一：索引参数使用'?x'与方法参数对应
    @Query(value = "select * from Student where STUDENT_ID = ?1",nativeQuery = true)
     List<Student> queryStudentById(int studentId);
3.2方法二： 命名参数使用':'与@Param对应,且:studentName和@Param("studentName")的名字必须相同
    @Query(value = "select * from Student where STUDENT_NAME = :studentName", nativeQuery = true)
    List<Student> queryStudentByName(@Param("studentName")String studentName);
注意：@Param("studentName")的名字必须与数据库的名字对应，然后String studentName的 studentName可以任意取名。
方法三:绑定对象：
  @Query(value = "insert into Student(STUDENT_ID,STUDENT_NAME) values(:#{#student.studentId},:#{#student.studentName})",nativeQuery=true)
    @Modifying
    void insertStudent(@Param("student")Student student);

八springboot的注解：
1.在Service层：除了查询其它的都要添加事务
@Transactional
    public void updateStudent(Student student){
        id.updateStudent(student);
    }
2.@Autowired：自动注入属性值









